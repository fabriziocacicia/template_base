name: Check for Template new Release
on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * SUN' # Runs every Sunday at 12:00

jobs:
  check-for-template-new-release:
    if: ${{ vars.TEMPLATE_REPO }}
    runs-on: ubuntu-latest
    outputs:
      TEMPLATE_LATEST_RELEASE: ${{ steps.latest_release_name.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Latest Template Release
        uses: octokit/request-action@v2.1.7
        id: get_latest_release
        with:
          route: GET /repos/${{ vars.TEMPLATE_REPO }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Extract Latest Template Release name
        id: latest_release_name
        shell: bash
        run: echo "value=${{ fromJSON(steps.get_latest_release.outputs.data).name }}" >> $GITHUB_OUTPUT
      - name: Compare latest template Release with last release update
        id: compare_versions
        uses: fabriziocacicia/semver-compare-action@v0.1.0-draft
        with:
          first: '${{ steps.latest_release_name.outputs.value }}'
          second: '${{ vars.UPDATED_TO_TEMPLATE_RELEASE }}'
          operator: '>'
      - name: Cancel Workflow if no new Release
        uses: potiuk/cancel-workflow-runs@v4_7
        if: ${{ !fromJSON(steps.compare_versions.outputs.result) }}
        with:
          cancelMode: self
          selfPreservation: false
          token: ${{ secrets.GITHUB_TOKEN }}
  create_issue:
    needs: check-for-template-new-release
    runs-on: ubuntu-latest
    if: needs.check-for-template-new-release.result == 'success'
    env:
      BRANCH_NAME: chore/merge_${{ vars.TEMPLATE_REPO }}_${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }}
      TITLE: "chore: merge ${{ vars.TEMPLATE_REPO }} ${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }} changes"
      LABEL: "type: chore"
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Create an issue for the merge ot fhe changes
        id: create_issue
        uses: octokit/request-action@v2.1.7
        with:
          route: POST /repos/${{ github.repository }}/issues
          title: ${{ toJSON(env.TITLE) }}
          body: |
            |
            There is a new Release of the `${{ vars.TEMPLATE_REPO }}` template: `${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }}`
            
            ## Steps to follow to merge the changes:
            - [ ] Clone the Repository locally: `git clone https://github.com/${{ github.repository }}`
            - [ ] Checkout the `${{ env.BRANCH_NAME }}` branch: `git checkout ${{ env.BRANCH_NAME }}`
            - [ ] Add the template as remote repository: `git remote add template https://github.com/${{ vars.TEMPLATE_REPO }}.git`
            - [ ] Fetch the template repository: `git fetch template`
            - [ ] Merge the tag of the latest template release: `git merge ${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }}`
            - [ ] Solve any conflicts
            - [ ] Push the changes to the remote branch: `git push origin ${{ env.BRANCH_NAME }}`
            - [ ] Create a PR with the changes from `${{ env.BRANCH_NAME }}` branch giving it as title the same name as this issue.
          assignees: '[fabriziocacicia]'
          labels: '[${{ toJSON(env.LABEL) }}]'
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Extract issue number from previous step
        id: issue_number
        shell: bash
        run: echo "value=${{ fromJSON(steps.create_issue.outputs.data).number }}" >> $GITHUB_OUTPUT
      - name: Create a branch to handle the actual merge
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh issue develop ${{ steps.issue_number.outputs.value }} --name ${{ env.BRANCH_NAME }} --base main
  cleanup-if-failure:
    runs-on: ubuntu-latest
    needs: create_issue
    if: needs.create_issue.result == 'failure' || needs.create_issue.result == 'skipped'
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Remove branch
        shell: bash
        run: git push origin -d ${{ env.BRANCH_NAME }}
